To integrate your PostgreSQL database with your Flask backend, use the credentials you provided. Here's how to modify the Flask app to connect to your database hosted on NeonDB:

Flask Backend Code (Using Your PostgreSQL Credentials)

from flask import Flask, jsonify, request
import psycopg2
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY')

# Connect to PostgreSQL using your provided credentials
def get_db_connection():
    conn = psycopg2.connect(
        dbname=os.getenv('PGDATABASE', 'neondb'),
        user=os.getenv('PGUSER', 'neondb_owner'),
        password=os.getenv('PGPASSWORD', '4piPg2YGLuRy'),
        host=os.getenv('PGHOST', 'ep-fragrant-scene-a507b740.us-east-2.aws.neon.tech'),
        port=os.getenv('PGPORT', '5432'),
        sslmode='require'
    )
    return conn

@app.route('/api/data/<category>')
def get_data(category):
    conn = get_db_connection()
    cursor = conn.cursor()

    # Example query to fetch counts for your frontend
    query = f"""
    SELECT label, COUNT(*)
    FROM {category}
    GROUP BY label;
    """
    cursor.execute(query)
    results = cursor.fetchall()

    data = {
        "labels": [row[0] for row in results],
        "data": [row[1] for row in results]
    }

    cursor.close()
    conn.close()

    return jsonify(data)

@app.route('/toggle_dark_mode', methods=['POST'])
def toggle_dark_mode():
    new_theme = request.json.get('theme')
    return jsonify({"success": True})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

Key Adjustments:

1. Environment Variables: Ensure these variables are set in Replitâ€™s Secrets:

PGDATABASE

PGHOST

PGPORT

PGUSER

PGPASSWORD

FLASK_SECRET_KEY



2. Database Query Assumptions:

Replace label in the SQL query with the actual column name in your table that you want to group by.

Ensure each category (like calls, sms, etc.) exists in your database with the correct schema.




Setting Up Secrets in Replit:

1. Open your Replit project.


2. Go to the Secrets section in the sidebar.


3. Add each of the environment variables mentioned above.



Testing Your Setup:

1. Deploy your Flask app on Replit.


2. Open the frontend and trigger API calls to /api/data/{category}.


3. Monitor the logs for errors and ensure data is fetched correctly from the database.



This configuration will allow your Flask app to connect seamlessly to your NeonDB PostgreSQL database hosted on Replit.

